-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of [stack, state, world] ->
    case insns of
      [] -> c
      | i:rest -> (
        showSMInsn(i);
        case i of
          READ ->
            case readWorld(world) of [z, w1] ->
              eval ([z:stack, state, w1], rest)
            esac
          | WRITE ->
            case stack of z:stack1 ->
              eval ([stack1, state, writeWorld(z, world)], rest)
            esac
          | BINOP (op) ->
            case stack of y:x:stack1 ->
              eval ([(evalOp(op, x, y)):stack1, state, world], rest)
            esac
          | LD (x) -> eval([state(x):stack, state, world], rest)
          | ST (x) ->
            case stack of z:stack1 ->
              eval ([stack1, state <- [x, z], world], rest)
            esac
          | CONST (n) -> eval ([n:stack, state, world], rest)
        esac
      )
    esac
  esac
  -- failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP (op)}
  esac
  -- failure ("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr(expr) +++ {ST (x)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Read (x) -> {READ, ST (x)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
    | Skip -> {}
  esac
}
