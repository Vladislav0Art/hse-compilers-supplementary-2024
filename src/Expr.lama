-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  -- st (state): [variable, value]
  case expr of
    Assn (expr1, expr2) ->
      case evalList(c, { expr1, expr2 }) of
        [[st, w2], { x, v }] ->
          [[st <- [x, v], w2], v]
      esac
    | Seq (expr1, expr2) -> eval(fst(eval(c, expr1)), expr2)
    | Skip -> [c, {}]
    | Read (x) ->
        case readWorld(w) of
          [z, w2] -> [[st <- [x, z], w2], {}]
        esac
    | Write (expr) ->
      case eval (c, expr) of
        [[st2, w2], v] -> [[st2, writeWorld(v, w2)], {}]
      esac
    | If (expr, s1, s2) ->
      case eval(c, expr) of
        [c2, v] ->
          case v of
            0   -> eval(c2, s2)
            | _ -> eval(c2, s1)
          esac
      esac

    | While (e, s) ->
        case eval(c, e) of
          [c2, 0] -> [c2, {}]
        | [c2, _] -> eval(eval(c2, s).fst, expr)
        esac

    | DoWhile (s, e) ->
      case eval(c, s) of
        [c2, _] ->
          case eval(c2, e) of
              [c3, 0] -> [c3, {}]
            | [c3, _] -> eval(c3, expr)
          esac
      esac

    | Var (x) -> [c, st(x)]
    | Ref (x) -> [c, x]
    | Const (z) -> [c, z]
    | Binop (op, expr1, expr2) ->
      case evalList(c, { expr1, expr2 }) of
        [c2, {x, y}] -> [c2, evalOp(op, x, y)]
      esac
    | Ignore (expr) ->
      case eval(c, expr) of
        [c2, _] -> [c2, {}]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
