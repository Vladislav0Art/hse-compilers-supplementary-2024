-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
-- Binop (op, l, r)
-- op (with precedence):
-- 0) "!!"
-- 1) "&&"
-- 2) "==" | "!=" | "<=" | "<" | ">=" | ">"
-- 3) "+" | "-"
-- 4) "*" | "/" | "%"
var primary = memo $ eta syntax (
  x=decimal {Const (stringInt (x))} |
  x=lident  {Var (x)}               |
  inbr[s("("), exp, s(")")]
);

var exp = memo $ eta (expr(
  {
    -- Each element of the list describes one precedence level
    -- with precedence increasing from head to tail
    [Left, {
      [s("!!"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Left, {
      [s("&&"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Nona, {
      [s("=="), fun (l, op, r) { Binop (op, l, r) }],
      [s("!="), fun (l, op, r) { Binop (op, l, r) }],
      [s("<="), fun (l, op, r) { Binop (op, l, r) }],
      [s("<"), fun (l, op, r) { Binop (op, l, r) }],
      [s(">="), fun (l, op, r) { Binop (op, l, r) }],
      [s(">"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Left, {
      [s("+"), fun (l, op, r) { Binop (op, l, r) }],
      [s("-"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Left, {
      [s("*"), fun (l, op, r) { Binop (op, l, r) }],
      [s("/"), fun (l, op, r) { Binop (op, l, r) }],
      [s("%"), fun (l, op, r) { Binop (op, l, r) }]
    }]
  },
  primary
));

-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)
-- TODO: move `kFi` here?
var elseBranchesStmt = memo $ eta syntax (
  -- Skip
  kSkip { Skip } |
  -- else S
  kElse s=stmt { s } |
  -- [...] elif E then S [branches]
  kElif e=exp kThen s=stmt branches=elseBranchesStmt { If (e, s, elseBranchesStmt) }
);

var primaryStmt = memo $ eta syntax (
  -- Assn
  x=lident s[":="] e=exp {Assn (x, e)}                      |

  kSkip {Skip}                                              |
  kRead  x=inbr[s("("), lident, s(")")] { Read (x) }        |
  kWrite expr=inbr[s("("), exp, s(")")] { Write (expr) }    |

  -- control flow statements
  -- TODO: should we use inbr for expressions here?

  -- if E then S ([skip | elif | else]*) fi
  kIf e=exp kThen s=stmt branches=elseBranchesStmt kFi { If (e, s, branches) } |

  -- === While family ===
  -- while E do S od
  kWhile e=exp kDo s=stmt kOd { While (e, s) } |
  -- do S while E od
  kDo s=stmt kWhile e=exp kOd { DoWhile (s, e) } |

  -- additional extensions
  -- for s1, e, s2 do s3 od
  kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {
    Seq (
      s1,
      While (e, Seq (s3, s2))
    )
  }
);

var stmt = memo $ eta syntax (
  -- Seq:
    -- 1: a single primary statement
  primaryStmt |
    -- 2: a sequence of statements
  s1=primaryStmt s[";"] s2=stmt {Seq (s1, s2)}
);