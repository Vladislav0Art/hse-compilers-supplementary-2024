-- Parser

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
-- Binop (op, l, r)
-- op (with precedence):
-- 0) "!!"
-- 1) "&&"
-- 2) "==" | "!=" | "<=" | "<" | ">=" | ">"
-- 3) "+" | "-"
-- 4) "*" | "/" | "%"
var primary = memo $ eta syntax (
  x=decimal {Const (stringInt (x))} |
  x=lident  {Var (x)}               |
  inbr[s("("), exp, s(")")]
);

var exp = memo $ eta (expr(
  {
    -- Each element of the list describes one precedence level
    -- with precedence increasing from head to tail
    [Left, {
      [s("!!"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Left, {
      [s("&&"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Nona, {
      [s("=="), fun (l, op, r) { Binop (op, l, r) }],
      [s("!="), fun (l, op, r) { Binop (op, l, r) }],
      [s("<="), fun (l, op, r) { Binop (op, l, r) }],
      [s("<"), fun (l, op, r) { Binop (op, l, r) }],
      [s(">="), fun (l, op, r) { Binop (op, l, r) }],
      [s(">"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Left, {
      [s("+"), fun (l, op, r) { Binop (op, l, r) }],
      [s("-"), fun (l, op, r) { Binop (op, l, r) }]
    }],
    [Left, {
      [s("*"), fun (l, op, r) { Binop (op, l, r) }],
      [s("/"), fun (l, op, r) { Binop (op, l, r) }],
      [s("%"), fun (l, op, r) { Binop (op, l, r) }]
    }]
  },
  primary
));

-- Seq, Read (x), Skip, Write (x), Assn (x, e)
var stmt = memo $ eta (failure ("statement parsing not implemented\n"));


-- Public top-level parser
public parse = stmt;

